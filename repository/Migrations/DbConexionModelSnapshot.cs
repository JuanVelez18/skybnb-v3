// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using repository.Conexions;

#nullable disable

namespace repository.Migrations
{
    [DbContext(typeof(DbConexion))]
    partial class DbConexionModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "PermissionsId");

                    b.HasIndex("PermissionsId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 1
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 2
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 3
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 4
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 5
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 6
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 7
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 8
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 9
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 10
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 11
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 12
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 13
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 14
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 15
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 16
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 17
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 18
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 19
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 20
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 21
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 23
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 24
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 25
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 26
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 28
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 29
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 30
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 32
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 34
                        },
                        new
                        {
                            RolesId = 1,
                            PermissionsId = 36
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 2
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 3
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 4
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 5
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 7
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 12
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 17
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 22
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 23
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 24
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 25
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 26
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 28
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 29
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 31
                        },
                        new
                        {
                            RolesId = 2,
                            PermissionsId = 32
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 2
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 3
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 4
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 5
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 7
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 12
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 17
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 23
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 27
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 28
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 29
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 31
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 32
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 35
                        },
                        new
                        {
                            RolesId = 3,
                            PermissionsId = 36
                        });
                });

            modelBuilder.Entity("RolesUsers", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RolesUsers");
                });

            modelBuilder.Entity("domain.Entities.Addresses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Complement")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("int");

                    b.Property<int>("IntersectionNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("domain.Entities.Auditories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId", "Timestamp");

                    b.ToTable("Auditories");
                });

            modelBuilder.Entity("domain.Entities.Bookings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestComment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumGuests")
                        .HasColumnType("int");

                    b.Property<Guid?>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("domain.Entities.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("domain.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("domain.Entities.Guests", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("domain.Entities.Payments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasPrecision(13, 2)
                        .HasColumnType("decimal(13,2)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("domain.Entities.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Permission to create a user",
                            Name = "create:user"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Permission to read a user",
                            Name = "read:user"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Permission to update a user",
                            Name = "update:user"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Permission to deactivate a user",
                            Name = "deactivate:user"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Permission to delete a user",
                            Name = "delete:user"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Permission to create a country",
                            Name = "create:country"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Permission to read a country",
                            Name = "read:country"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Permission to update a country",
                            Name = "update:country"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Permission to deactivate a country",
                            Name = "deactivate:country"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Permission to delete a country",
                            Name = "delete:country"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Permission to create a city",
                            Name = "create:city"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Permission to read a city",
                            Name = "read:city"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Permission to update a city",
                            Name = "update:city"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Permission to deactivate a city",
                            Name = "deactivate:city"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Permission to delete a city",
                            Name = "delete:city"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Permission to create a property type",
                            Name = "create:propertyType"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Permission to read a property type",
                            Name = "read:propertyType"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Permission to update a property type",
                            Name = "update:propertyType"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Permission to deactivate a property type",
                            Name = "deactivate:propertyType"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Permission to delete a property type",
                            Name = "delete:propertyType"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Permission to read auditories",
                            Name = "read:auditories"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Permission to create a property",
                            Name = "create:property"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Permission to read a property",
                            Name = "read:property"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Permission to update a property",
                            Name = "update:property"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Permission to deactivate a property",
                            Name = "deactivate:property"
                        },
                        new
                        {
                            Id = 26,
                            Description = "Permission to delete a property",
                            Name = "delete:property"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Permission to create a booking",
                            Name = "create:booking"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Permission to read a booking",
                            Name = "read:booking"
                        },
                        new
                        {
                            Id = 29,
                            Description = "Permission to update a booking",
                            Name = "update:booking"
                        },
                        new
                        {
                            Id = 30,
                            Description = "Permission to delete a booking",
                            Name = "delete:booking"
                        },
                        new
                        {
                            Id = 31,
                            Description = "Permission to create a review",
                            Name = "create:review"
                        },
                        new
                        {
                            Id = 32,
                            Description = "Permission to read a review",
                            Name = "read:review"
                        },
                        new
                        {
                            Id = 33,
                            Description = "Permission to update a review",
                            Name = "update:review"
                        },
                        new
                        {
                            Id = 34,
                            Description = "Permission to delete a review",
                            Name = "delete:review"
                        },
                        new
                        {
                            Id = 35,
                            Description = "Permission to create a payment",
                            Name = "create:payment"
                        },
                        new
                        {
                            Id = 36,
                            Description = "Permission to read a payment",
                            Name = "read:payment"
                        });
                });

            modelBuilder.Entity("domain.Entities.Properties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AverageRating")
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)");

                    b.Property<decimal>("BasePricePerNight")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumBedrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumBeds")
                        .HasColumnType("int");

                    b.Property<int>("ReviewsCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HostId");

                    b.HasIndex("TypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("domain.Entities.PropertyAssets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("PropertyAssets");
                });

            modelBuilder.Entity("domain.Entities.PropertyTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("domain.Entities.RefreshTokens", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReplacedByTokenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReplacedByTokenId");

                    b.HasIndex("TokenValue")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("domain.Entities.Reviews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rating")
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("GuestId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("domain.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Represent the system administrator",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Represent the property owner",
                            Name = "Host"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Represent the property guest",
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("domain.Entities.Customers", b =>
                {
                    b.HasBaseType("domain.Entities.Users");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasIndex("CountryId");

                    b.HasIndex("Dni")
                        .IsUnique()
                        .HasFilter("[Dni] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.HasOne("domain.Entities.Permissions", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Roles", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolesUsers", b =>
                {
                    b.HasOne("domain.Entities.Roles", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Entities.Bookings", b =>
                {
                    b.HasOne("domain.Entities.Customers", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("domain.Entities.Properties", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("domain.Entities.Cities", b =>
                {
                    b.HasOne("domain.Entities.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("domain.Entities.Guests", b =>
                {
                    b.HasOne("domain.Entities.Addresses", "Address")
                        .WithOne("Guest")
                        .HasForeignKey("domain.Entities.Guests", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Cities", "City")
                        .WithMany("Guests")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Countries", "Country")
                        .WithMany("Guests")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Customers", "Customer")
                        .WithOne("GuestProfile")
                        .HasForeignKey("domain.Entities.Guests", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("domain.Entities.Payments", b =>
                {
                    b.HasOne("domain.Entities.Bookings", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Customers", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.Properties", b =>
                {
                    b.HasOne("domain.Entities.Addresses", "Address")
                        .WithOne("Property")
                        .HasForeignKey("domain.Entities.Properties", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Cities", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Countries", "Country")
                        .WithMany("Properties")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Customers", "Host")
                        .WithMany("HostedProperties")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.PropertyTypes", "Type")
                        .WithMany("Properties")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Host");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("domain.Entities.PropertyAssets", b =>
                {
                    b.HasOne("domain.Entities.Properties", "Property")
                        .WithMany("Multimedia")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("domain.Entities.RefreshTokens", b =>
                {
                    b.HasOne("domain.Entities.RefreshTokens", "ReplacedByToken")
                        .WithMany("ReplacesTokens")
                        .HasForeignKey("ReplacedByTokenId");

                    b.HasOne("domain.Entities.Users", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedByToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.Reviews", b =>
                {
                    b.HasOne("domain.Entities.Bookings", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("domain.Entities.Reviews", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Customers", "Guest")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("domain.Entities.Properties", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("domain.Entities.Customers", b =>
                {
                    b.HasOne("domain.Entities.Countries", "Country")
                        .WithMany("Customers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("domain.Entities.Users", null)
                        .WithOne()
                        .HasForeignKey("domain.Entities.Customers", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("domain.Entities.Addresses", b =>
                {
                    b.Navigation("Guest");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("domain.Entities.Bookings", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("domain.Entities.Cities", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("domain.Entities.Countries", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Customers");

                    b.Navigation("Guests");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("domain.Entities.Properties", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Multimedia");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("domain.Entities.PropertyTypes", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("domain.Entities.RefreshTokens", b =>
                {
                    b.Navigation("ReplacesTokens");
                });

            modelBuilder.Entity("domain.Entities.Users", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("domain.Entities.Customers", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GuestProfile");

                    b.Navigation("HostedProperties");

                    b.Navigation("Payments");

                    b.Navigation("ReviewsWritten");
                });
#pragma warning restore 612, 618
        }
    }
}
